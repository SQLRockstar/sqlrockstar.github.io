name: Manual WordPress XML Parser

on:
  workflow_dispatch:
    inputs:
      xml_url:
        description: 'URL to WordPress XML file'
        required: true
        type: string

permissions:
  contents: write

jobs:
  parse:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Download XML file
      run: |
        curl -L -A "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36" -o wordpress-export.xml "${{ github.event.inputs.xml_url }}"
        
    - name: Set up Python for XML parsing
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install Python dependencies
      run: |
        pip install beautifulsoup4 lxml python-dateutil
        
    - name: Create blog directory structure
      run: |
        mkdir -p blog/_posts
        mkdir -p blog/assets/images
        
    - name: Parse WordPress XML and create Jekyll posts
      run: |
        python3 << 'EOF'
        import xml.etree.ElementTree as ET
        from bs4 import BeautifulSoup
        import re
        import os
        from datetime import datetime
        from dateutil import parser as date_parser
        
        # Parse XML
        print("Parsing WordPress XML...")
        try:
            tree = ET.parse('wordpress-export.xml')
            root = tree.getroot()
            print(f"XML parsed successfully. Root tag: {root.tag}")
        except Exception as e:
            print(f"Error parsing XML: {e}")
            exit(1)
        
        # Find namespace
        namespaces = {
            'wp': 'http://wordpress.org/export/1.2/',
            'content': 'http://purl.org/rss/1.0/modules/content/',
            'excerpt': 'http://wordpress.org/export/1.2/excerpt/',
            'dc': 'http://purl.org/dc/elements/1.1/'
        }
        
        posts_created = 0
        
        # Find all items (posts)
        items = root.findall('.//item')
        print(f"Found {len(items)} items in XML")
        
        for item in items:
            try:
                # Get post type
                post_type = item.find('wp:post_type', namespaces)
                if post_type is None or post_type.text != 'post':
                    continue
                
                # Get post status
                status = item.find('wp:status', namespaces)
                if status is None or status.text != 'publish':
                    continue
                
                # Get post data
                title = item.find('title')
                title_text = title.text if title is not None else 'Untitled'
                # Escape quotes and special characters for YAML
                title_text = title_text.replace('"', '\\"').replace("'", "\\'")
                
                # Get content
                content = item.find('content:encoded', namespaces)
                content_text = content.text if content is not None else ''
                
                # Get date
                pub_date = item.find('pubDate')
                if pub_date is not None:
                    try:
                        date_obj = date_parser.parse(pub_date.text)
                        date_str = date_obj.strftime('%Y-%m-%d')
                        # Use simpler date format for Jekyll
                        time_str = date_obj.strftime('%Y-%m-%d %H:%M:%S')
                    except:
                        date_str = '2024-01-01'
                        time_str = '2024-01-01 00:00:00'
                else:
                    date_str = '2024-01-01'
                    time_str = '2024-01-01 00:00:00'
                
                # Get slug - make it more robust
                post_name = item.find('wp:post_name', namespaces)
                if post_name is not None and post_name.text:
                    slug = post_name.text
                else:
                    # Create slug from title
                    slug = re.sub(r'[^a-zA-Z0-9\s-]', '', title_text.lower())
                    slug = re.sub(r'[-\s]+', '-', slug).strip('-')
                    # Ensure slug is not empty
                    if not slug:
                        slug = 'untitled'
                
                # Get categories - ensure they're properly formatted
                categories = []
                for category in item.findall('category'):
                    if category.get('domain') == 'category' and category.text:
                        # Clean category names
                        cat_name = category.text.strip()
                        if cat_name:
                            categories.append(cat_name)
                
                # Get tags - ensure they're properly formatted
                tags = []
                for tag in item.findall('category'):
                    if tag.get('domain') == 'post_tag' and tag.text:
                        # Clean tag names
                        tag_name = tag.text.strip()
                        if tag_name:
                            tags.append(tag_name)
                
                # Create Jekyll post
                filename = f"{date_str}-{slug}.markdown"
                filepath = f"blog/_posts/{filename}"
                
                # Convert HTML content to markdown (basic conversion)
                if content_text:
                    # Use BeautifulSoup to clean HTML
                    soup = BeautifulSoup(content_text, 'html.parser')
                    content_text = str(soup)
                
                # Create front matter with proper YAML formatting
                front_matter = f"""---
layout: post
title: "{title_text}"
date: {time_str}
categories: [{', '.join(f'"{cat}"' for cat in categories)}]
tags: [{', '.join(f'"{tag}"' for tag in tags)}]
---

{content_text}
"""
                
                # Write file
                with open(filepath, 'w', encoding='utf-8') as f:
                    f.write(front_matter)
                
                posts_created += 1
                print(f"Created post: {filename}")
                
            except Exception as e:
                print(f"Error processing item: {e}")
                continue
        
        print(f"Successfully created {posts_created} posts")
        EOF
        
    - name: Create Jekyll config
      run: |
        cat > blog/_config.yml << 'ENDCONFIG'
        title: Thomas LaRock's Blog
        description: Database and technology insights
        baseurl: "/blog"
        url: "https://sqlrockstar.github.io"
        permalink: /:year/:month/:day/:title/
        
        plugins:
          - jekyll-feed
          - jekyll-sitemap
          - jekyll-seo-tag
        
        markdown: kramdown
        highlighter: rouge
        theme: minima
        ENDCONFIG
        
    - name: Create index page
      run: |
        cat > blog/index.html << 'ENDINDEX'
        ---
        layout: home
        title: Blog
        ---
        ENDINDEX
        
    - name: Create Gemfile
      run: |
        cat > blog/Gemfile << 'ENDGEM'
        source "https://rubygems.org"
        gem "jekyll", "~> 4.3.0"
        gem "minima", "~> 2.5"
        
        group :jekyll_plugins do
          gem "jekyll-feed", "~> 0.12"
          gem "jekyll-sitemap"
          gem "jekyll-seo-tag"
        end
        ENDGEM
        
    - name: Show results
      run: |
        echo "Posts created:"
        ls -la blog/_posts/
        echo ""
        echo "Total posts: $(find blog/_posts -name "*.markdown" | wc -l)"
        echo ""
        echo "Sample post preview:"
        find blog/_posts -name "*.markdown" | head -1 | xargs head -20
        
    - name: Commit changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git commit -m "Manual WordPress XML parse - created $(find blog/_posts -name "*.markdown" | wc -l) posts" || echo "No changes to commit"
        git push origin main
