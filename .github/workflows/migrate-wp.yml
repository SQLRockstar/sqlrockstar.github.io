name: WordPress to Jekyll Migration

on:
  workflow_dispatch:
    inputs:
      xml_file_path:
        description: 'Path to WordPress XML export file in repository'
        required: true
        default: 'data/thomaslarock.WordPress.2020-2024.xml'
        type: string
      commit_message:
        description: 'Commit message for the migration'
        required: false
        default: 'Migrate WordPress posts to Jekyll'
        type: string

jobs:
  migrate:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Ruby
      run: |
        # Use Ubuntu's built-in Ruby to avoid action server issues
        sudo apt-get update
        sudo apt-get install -y ruby-full build-essential zlib1g-dev
        echo "Ruby version:"
        ruby --version
        echo "Gem version:"
        gem --version
        
    - name: Install dependencies
      run: |
        # Install gems with sudo to avoid permission issues
        sudo gem install jekyll-import
        sudo gem install nokogiri
        sudo gem install reverse_markdown
        sudo gem install open_uri_redirections
        
        # Verify installations
        echo "Installed gems:"
        gem list | grep -E "(jekyll-import|nokogiri|reverse_markdown|open_uri_redirections)"
        
    - name: Check WordPress XML file
      run: |
        XML_FILE="${{ github.event.inputs.xml_file_path }}"
        
        if [ ! -f "$XML_FILE" ]; then
          echo "ERROR: XML file not found at $XML_FILE"
          echo "Available files in data directory:"
          ls -la data/ || echo "No data directory found"
          exit 1
        fi
        
        # Copy to expected location for the conversion script
        cp "$XML_FILE" wordpress-export.xml
        
        echo "Using XML file: $XML_FILE"
        ls -la wordpress-export.xml
        echo "File size: $(wc -c < wordpress-export.xml) bytes"
        echo "First 10 lines of XML:"
        head -10 wordpress-export.xml
        
    - name: Create conversion script
      run: |
        cat > convert.rb << 'EOF'
        #!/usr/bin/env ruby
        require 'jekyll-import'
        require 'fileutils'
        require 'yaml'
        require 'date'
        require 'nokogiri'
        
        # Create necessary directories
        FileUtils.mkdir_p('_posts')
        FileUtils.mkdir_p('_pages')
        FileUtils.mkdir_p('assets/images')
        
        puts "Starting WordPress import..."
        puts "XML file exists: #{File.exist?('wordpress-export.xml')}"
        puts "XML file size: #{File.size('wordpress-export.xml')} bytes"
        
        # Check XML structure first
        begin
          doc = Nokogiri::XML(File.read('wordpress-export.xml'))
          items = doc.xpath('//item')
          posts = items.select { |item| item.xpath('.//wp:post_type').text == 'post' }
          pages = items.select { |item| item.xpath('.//wp:post_type').text == 'page' }
          
          puts "Found #{items.length} total items"
          puts "Found #{posts.length} posts"
          puts "Found #{pages.length} pages"
          
          if items.length == 0
            puts "No items found in XML. Checking XML structure..."
            puts "Root element: #{doc.root.name}"
            puts "Channel exists: #{!doc.xpath('//channel').empty?}"
            puts "Items without namespace: #{doc.xpath('//item').length}"
          end
        rescue => e
          puts "Error parsing XML: #{e.message}"
          puts "XML content preview:"
          puts File.read('wordpress-export.xml')[0..500]
        end
        
        # Use manual parsing approach (more reliable)
        doc = Nokogiri::XML(File.read('wordpress-export.xml'))
        
        # Define namespaces properly
        namespaces = {
          'wp' => 'http://wordpress.org/export/1.2/',
          'content' => 'http://purl.org/rss/1.0/modules/content/',
          'dc' => 'http://purl.org/dc/elements/1.1/'
        }
        
        items = doc.xpath('//item')
        puts "Found #{items.length} items in XML"
        
        items.each_with_index do |item, index|
          # Extract post data with proper namespace handling
          post_type = item.xpath('.//wp:post_type', namespaces).text
          status = item.xpath('.//wp:status', namespaces).text
          
          puts "Item #{index + 1}: type=#{post_type}, status=#{status}"
          
          next unless ['post', 'page'].include?(post_type)
          next unless status == 'publish'
          
          title = item.xpath('.//title').text
          content = item.xpath('.//content:encoded', namespaces).text
          pub_date = item.xpath('.//pubDate').text
          post_name = item.xpath('.//wp:post_name', namespaces).text
          post_date = item.xpath('.//wp:post_date', namespaces).text
          
          # Use WordPress post_date if available, otherwise pubDate
          date_str = post_date.empty? ? pub_date : post_date
          
          # Parse date
          begin
            date = DateTime.parse(date_str)
          rescue
            puts "Could not parse date: #{date_str}, using current time"
            date = DateTime.now
          end
          
          # Create safe filename
          safe_title = title.downcase.gsub(/[^a-z0-9]+/, '-').gsub(/-+/, '-').strip('-')
          slug = post_name.empty? ? safe_title : post_name
          
          if post_type == 'post'
            filename = "_posts/#{date.strftime('%Y-%m-%d')}-#{slug}.md"
          else
            filename = "_pages/#{slug}.md"
          end
          
          # Extract categories and tags
          categories = item.xpath('.//category[@domain="category"]').map(&:text).reject(&:empty?)
          tags = item.xpath('.//category[@domain="post_tag"]').map(&:text).reject(&:empty?)
          
          # Create front matter
          front_matter = {
            'layout' => post_type == 'post' ? 'post' : 'page',
            'title' => title,
            'date' => date.strftime('%Y-%m-%d %H:%M:%S %z')
          }
          
          front_matter['categories'] = categories unless categories.empty?
          front_matter['tags'] = tags unless tags.empty?
          
          # Convert WordPress blocks to cleaner HTML/Markdown
          clean_content = content.gsub(/<!-- wp:.*?-->/, '').gsub(/<!-- \/wp:.*?-->/, '').strip
          
          # Write file
          File.open(filename, 'w') do |f|
            f.write("---\n")
            f.write(front_matter.to_yaml.sub(/^---\n/, ''))
            f.write("---\n\n")
            f.write(clean_content)
          end
          
          puts "âœ“ Created: #{filename}"
        end
        
        # Clean up and optimize posts
        Dir.glob('_posts/*.md').each do |file|
          puts "Processing post: #{file}"
          content = File.read(file)
          
          # Extract front matter and content
          if content =~ /\A(---\s*\n.*?\n?)^(---\s*$\n?)/m
            front_matter = YAML.load($1)
            post_content = content.sub(/\A(---\s*\n.*?\n?)^(---\s*$\n?)/m, '')
            
            # Clean up front matter
            front_matter.delete('wordpress_id') if front_matter['wordpress_id']
            front_matter.delete('wordpress_url') if front_matter['wordpress_url']
            
            # Ensure proper date format
            if front_matter['date'].is_a?(String)
              begin
                front_matter['date'] = DateTime.parse(front_matter['date']).strftime('%Y-%m-%d %H:%M:%S %z')
              rescue
                # Keep original if parsing fails
              end
            end
            
            # Clean up categories and tags
            if front_matter['categories'].is_a?(Array)
              front_matter['categories'] = front_matter['categories'].map(&:strip).reject(&:empty?)
            end
            
            if front_matter['tags'].is_a?(Array)
              front_matter['tags'] = front_matter['tags'].map(&:strip).reject(&:empty?)
            end
            
            # Write cleaned file
            File.open(file, 'w') do |f|
              f.write("---\n")
              f.write(front_matter.to_yaml.sub(/^---\n/, ''))
              f.write("---\n\n")
              f.write(post_content)
            end
          end
        end
        
        # Clean up pages
        Dir.glob('_pages/*.md').each do |file|
          puts "Processing page: #{file}"
          content = File.read(file)
          
          if content =~ /\A(---\s*\n.*?\n?)^(---\s*$\n?)/m
            front_matter = YAML.load($1)
            post_content = content.sub(/\A(---\s*\n.*?\n?)^(---\s*$\n?)/m, '')
            
            # Add layout if missing
            front_matter['layout'] ||= 'page'
            
            # Clean up front matter
            front_matter.delete('wordpress_id') if front_matter['wordpress_id']
            front_matter.delete('wordpress_url') if front_matter['wordpress_url']
            
            File.open(file, 'w') do |f|
              f.write("---\n")
              f.write(front_matter.to_yaml.sub(/^---\n/, ''))
              f.write("---\n\n")
              f.write(post_content)
            end
          end
        end
        
        puts "Migration completed!"
        puts "Posts created: #{Dir.glob('_posts/*.md').length}"
        puts "Pages created: #{Dir.glob('_pages/*.md').length}"
        
        # List all created files
        puts "\nCreated posts:"
        Dir.glob('_posts/*.md').each { |f| puts "  #{f}" }
        puts "\nCreated pages:"
        Dir.glob('_pages/*.md').each { |f| puts "  #{f}" }
        EOF
        
    - name: Run conversion
      run: ruby convert.rb
      
    - name: Create Jekyll config if not exists
      run: |
        if [ ! -f "_config.yml" ]; then
          cat > _config.yml << 'EOF'
        title: My Jekyll Blog
        description: Migrated from WordPress
        baseurl: ""
        url: ""
        
        # Build settings
        markdown: kramdown
        highlighter: rouge
        theme: minima
        plugins:
          - jekyll-feed
          - jekyll-sitemap
          - jekyll-seo-tag
        
        # Exclude from processing
        exclude:
          - Gemfile
          - Gemfile.lock
          - node_modules
          - vendor/bundle/
          - vendor/cache/
          - vendor/gems/
          - vendor/ruby/
          - data/
          - wordpress-export.xml
          - convert.rb
        EOF
        fi
        
    - name: Create Gemfile if not exists
      run: |
        if [ ! -f "Gemfile" ]; then
          cat > Gemfile << 'EOF'
        source "https://rubygems.org"
        
        gem "jekyll", "~> 4.3"
        gem "minima", "~> 2.5"
        
        group :jekyll_plugins do
          gem "jekyll-feed", "~> 0.12"
          gem "jekyll-sitemap"
          gem "jekyll-seo-tag"
        end
        
        # Windows and JRuby does not include zoneinfo files, so bundle the tzinfo-data gem
        # and associated library.
        platforms :mingw, :x64_mingw, :mswin, :jruby do
          gem "tzinfo", ">= 1", "< 3"
          gem "tzinfo-data"
        end
        
        # Performance-booster for watching directories on Windows
        gem "wdm", "~> 0.1.1", :platforms => [:mingw, :x64_mingw, :mswin]
        
        # Lock `http_parser.rb` gem to `v0.6.x` on JRuby builds since newer versions of the gem
        # do not have a Java counterpart.
        gem "http_parser.rb", "~> 0.6.0", :platforms => [:jruby]
        EOF
        fi
        
    - name: Clean up temporary files
      run: |
        rm -f wordpress-export.xml convert.rb
        
    - name: Show migration results
      run: |
        echo "Migration Summary:"
        echo "=================="
        echo "Posts created: $(find _posts -name '*.md' | wc -l)"
        echo "Pages created: $(find _pages -name '*.md' 2>/dev/null | wc -l || echo 0)"
        echo ""
        echo "Sample posts:"
        ls -la _posts/ | head -5
        
    - name: Commit changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git commit -m "${{ github.event.inputs.commit_message }}" || echo "No changes to commit"
        git push
